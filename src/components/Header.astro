---
// HeaderOverlay.astro
export interface Props {
  brand?: string;
  links?: Array<{
    text: string;
    url: string;
    external?: boolean;
  }>;
  position?: 'left' | 'center' | 'right';
  brandPosition?: 'left' | 'center';
}

const { 
  brand = "Mi Empresa",
  links = [
    { text: "Inicio", url: "/" },
    { text: "Qué es", url: "/about" },
    { text: "Niveles", url: "/levels" },
    { text: "Noticias", url: "/news" },
    { text: "Contacto", url: "/hello" }
  ],
  position = 'center',
  brandPosition = 'left'
} = Astro.props;

const positionClasses = {
  left: 'left-4',
  center: 'left-1/2 -translate-x-1/2',
  right: 'right-4'
};

const brandPositionClasses = {
  left: 'justify-start',
  center: 'justify-center'
};
---

<div class={`header-overlay ${positionClasses[position]}`}>
  <!-- Brand/Logo -->
  {brand && (
    <div class={`brand-section ${brandPositionClasses[brandPosition]}`}>
      <a href="/" class="brand-link">
       <img src="/teafriendly-sf-full.svg" alt="Logo de TEA Friendly" class="logo" />
      </a>
    </div>
  )}

  <!-- Navigation Links -->
  <nav class="nav-section">
    {links.map((link) => (
      <div class="nav-item" data-tooltip={`Ir a ${link.text}`}>
        <a 
          href={link.url} 
          class="nav-link"
          target={link.external ? "_blank" : undefined}
          rel={link.external ? "noopener noreferrer" : undefined}
          aria-label={link.text}
        >
          {link.text}
        </a>
      </div>
    ))}
  </nav>

  <!-- Tooltip -->
  <div class="tooltip" id="header-tooltip"></div>
</div>



<script>
  // Funcionalidad del tooltip
  const navItems = document.querySelectorAll('.nav-item');
  const tooltip = document.getElementById('header-tooltip');

  navItems.forEach(item => {
    const link = item.querySelector('.nav-link');
    const tooltipText = item.getAttribute('data-tooltip');

    link.addEventListener('mouseenter', (e) => {
      tooltip.textContent = tooltipText;
      tooltip.classList.add('show');
      
      // Posicionar el tooltip relativo al item que disparó el hover
      const rect = item.getBoundingClientRect();
      const headerRect = item.closest('.header-overlay').getBoundingClientRect();
      
      // Posición relativa al contenedor del header
      const leftPosition = rect.left - headerRect.left + (rect.width / 2);
      tooltip.style.left = `${leftPosition}px`;
      tooltip.style.top = '80px';
    });

    link.addEventListener('mouseleave', () => {
      tooltip.classList.remove('show');
    });
  });

  // Ocultar tooltip cuando se hace scroll
  window.addEventListener('scroll', () => {
    tooltip.classList.remove('show');
  });

  // Efecto de scroll - header más compacto
  let lastScrollY = window.scrollY;
  const header = document.querySelector('.header-overlay');

  window.addEventListener('scroll', () => {
    const currentScrollY = window.scrollY;
    
    if (currentScrollY > 100) {
      header.classList.add('scrolled');
    } else {
      header.classList.remove('scrolled');
    }
    
    lastScrollY = currentScrollY;
  });

  // Resaltar enlace activo basado en la URL actual
  function highlightActiveLink() {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('.nav-link');
    
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href === currentPath || (currentPath === '/' && href === '/')) {
        link.style.background = 'rgba(255, 255, 255, 0.3)';
        link.style.borderColor = 'rgba(255, 255, 255, 0.5)';
        link.style.transform = 'scale(1.05)';
      }
    });
  }

  // Ejecutar al cargar la página
  document.addEventListener('DOMContentLoaded', highlightActiveLink);
</script>